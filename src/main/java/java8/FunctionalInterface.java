package com.tarun;


import java.util.function.*;
import java.util.*;
import java.util.stream.*;


public class FunctionalInterface {
    public static void main(String args[]) {
        // Creating predicate
        Predicate<Integer> lesserthan = i -> (i < 18);

        // Calling Predicate method
        System.out.println(lesserthan.test(10));

        // predicate chaining

        Predicate<Integer> greaterThanTen = (i) -> i > 10;

        Predicate<Integer> lowerThanTwenty = (i) -> i < 20;

        boolean result = greaterThanTen.and(lowerThanTwenty).test(21);
        System.out.println(result);
        result = greaterThanTen.or(lowerThanTwenty).test(18);

        System.out.println(result);

        // Consumer to display a number
        Consumer<Integer> display = a -> System.out.println(a);

        // Implement display using accept()
        display.accept(10);



        // Consumer to display a list of numbers
        Consumer<List<Integer> >
                dispList = list -> list.stream().forEach(a -> System.out.print(a + " "));

        //doesnt modify the list
        Consumer<List<Integer> >
                modify = list -> list.stream().map(a -> a*2).forEach(System.out::println);



        // Consumer to multiply 2 to every integer of a list - this will modify
        Consumer<List<Integer> > modify2 = list ->
        {
            for (int i = 0; i < list.size(); i++)
                list.set(i, 2 * list.get(i));
        };


        List<Integer> list = new ArrayList<Integer>();
        list.add(2);
        list.add(1);
        list.add(3);

        modify.accept(list);
        dispList.accept(list);
        modify2.accept(list);
        System.out.println("");
        dispList.accept(list);
        System.out.println("\n");

        modify2.andThen(dispList).accept(list);

        System.out.println("\n supplier interface \n");

        // This function returns a random value.
        Supplier<Double> randomValue = () -> Math.random();

        // Print the random value using get()
        System.out.println("random value  "  + randomValue.get() * 100000);

        Stream.generate(new Random()::nextInt)
                .limit(5).forEach(System.out::println);
        System.out.println("\n");

        //Stream generate(Supplier<T> s) returns an infinite sequential unordered stream where each element is generated by the provided Supplier.

        int[] fibs = {0, 1};
        Stream<Integer> fibonacci = Stream.generate(() -> {
            int res = fibs[1];
            int fib3 = fibs[0] + fibs[1];
            fibs[0] = fibs[1];
            fibs[1] = fib3;
            return res;
        });
        System.out.println("\n");



        fibonacci.limit(10).forEach(i->System.out.print(i+"  "));

    }
}
